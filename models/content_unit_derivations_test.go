// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testContentUnitDerivations(t *testing.T) {
	t.Parallel()

	query := ContentUnitDerivations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContentUnitDerivationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentUnitDerivationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ContentUnitDerivations().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentUnitDerivationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContentUnitDerivationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContentUnitDerivationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ContentUnitDerivationExists(tx, o.SourceID, o.DerivedID)
	if err != nil {
		t.Errorf("Unable to check if ContentUnitDerivation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContentUnitDerivationExists to return true, but got false.")
	}
}

func testContentUnitDerivationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	contentUnitDerivationFound, err := FindContentUnitDerivation(tx, o.SourceID, o.DerivedID)
	if err != nil {
		t.Error(err)
	}

	if contentUnitDerivationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContentUnitDerivationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ContentUnitDerivations().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testContentUnitDerivationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ContentUnitDerivations().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContentUnitDerivationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	contentUnitDerivationOne := &ContentUnitDerivation{}
	contentUnitDerivationTwo := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivationOne, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err = randomize.Struct(seed, contentUnitDerivationTwo, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = contentUnitDerivationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contentUnitDerivationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContentUnitDerivations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContentUnitDerivationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	contentUnitDerivationOne := &ContentUnitDerivation{}
	contentUnitDerivationTwo := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, contentUnitDerivationOne, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err = randomize.Struct(seed, contentUnitDerivationTwo, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = contentUnitDerivationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = contentUnitDerivationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testContentUnitDerivationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContentUnitDerivationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(contentUnitDerivationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContentUnitDerivationToOneContentUnitUsingDerived(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ContentUnitDerivation
	var foreign ContentUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contentUnitDBTypes, false, contentUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnit struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DerivedID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Derived().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContentUnitDerivationSlice{&local}
	if err = local.L.LoadDerived(tx, false, (*[]*ContentUnitDerivation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Derived == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Derived = nil
	if err = local.L.LoadDerived(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Derived == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContentUnitDerivationToOneContentUnitUsingSource(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local ContentUnitDerivation
	var foreign ContentUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, contentUnitDerivationDBTypes, false, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contentUnitDBTypes, false, contentUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnit struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SourceID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Source().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContentUnitDerivationSlice{&local}
	if err = local.L.LoadSource(tx, false, (*[]*ContentUnitDerivation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Source == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Source = nil
	if err = local.L.LoadSource(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Source == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContentUnitDerivationToOneSetOpContentUnitUsingDerived(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ContentUnitDerivation
	var b, c ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contentUnitDerivationDBTypes, false, strmangle.SetComplement(contentUnitDerivationPrimaryKeyColumns, contentUnitDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ContentUnit{&b, &c} {
		err = a.SetDerived(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Derived != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DerivedContentUnitDerivations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DerivedID != x.ID {
			t.Error("foreign key was wrong value", a.DerivedID)
		}

		if exists, err := ContentUnitDerivationExists(tx, a.SourceID, a.DerivedID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testContentUnitDerivationToOneSetOpContentUnitUsingSource(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a ContentUnitDerivation
	var b, c ContentUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, contentUnitDerivationDBTypes, false, strmangle.SetComplement(contentUnitDerivationPrimaryKeyColumns, contentUnitDerivationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contentUnitDBTypes, false, strmangle.SetComplement(contentUnitPrimaryKeyColumns, contentUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ContentUnit{&b, &c} {
		err = a.SetSource(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Source != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SourceContentUnitDerivations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SourceID != x.ID {
			t.Error("foreign key was wrong value", a.SourceID)
		}

		if exists, err := ContentUnitDerivationExists(tx, a.SourceID, a.DerivedID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testContentUnitDerivationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testContentUnitDerivationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ContentUnitDerivationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testContentUnitDerivationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ContentUnitDerivations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	contentUnitDerivationDBTypes = map[string]string{`SourceID`: `bigint`, `DerivedID`: `bigint`, `Name`: `character varying`}
	_                            = bytes.MinRead
)

func testContentUnitDerivationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(contentUnitDerivationAllColumns) == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testContentUnitDerivationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(contentUnitDerivationAllColumns) == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ContentUnitDerivation{}
	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, contentUnitDerivationDBTypes, true, contentUnitDerivationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(contentUnitDerivationAllColumns, contentUnitDerivationPrimaryKeyColumns) {
		fields = contentUnitDerivationAllColumns
	} else {
		fields = strmangle.SetComplement(
			contentUnitDerivationAllColumns,
			contentUnitDerivationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ContentUnitDerivationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testContentUnitDerivationsUpsert(t *testing.T) {
	t.Parallel()

	if len(contentUnitDerivationAllColumns) == len(contentUnitDerivationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ContentUnitDerivation{}
	if err = randomize.Struct(seed, &o, contentUnitDerivationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContentUnitDerivation: %s", err)
	}

	count, err := ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, contentUnitDerivationDBTypes, false, contentUnitDerivationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ContentUnitDerivation struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ContentUnitDerivation: %s", err)
	}

	count, err = ContentUnitDerivations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
