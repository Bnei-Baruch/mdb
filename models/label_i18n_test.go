// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testLabelI18ns(t *testing.T) {
	t.Parallel()

	query := LabelI18ns(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testLabelI18nsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = labelI18n.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLabelI18nsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = LabelI18ns(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLabelI18nsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := LabelI18nSlice{labelI18n}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testLabelI18nsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := LabelI18nExists(tx, labelI18n.LabelID, labelI18n.Language)
	if err != nil {
		t.Errorf("Unable to check if LabelI18n exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LabelI18nExistsG to return true, but got false.")
	}
}
func testLabelI18nsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	labelI18nFound, err := FindLabelI18n(tx, labelI18n.LabelID, labelI18n.Language)
	if err != nil {
		t.Error(err)
	}

	if labelI18nFound == nil {
		t.Error("want a record, got nil")
	}
}
func testLabelI18nsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = LabelI18ns(tx).Bind(labelI18n); err != nil {
		t.Error(err)
	}
}

func testLabelI18nsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := LabelI18ns(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLabelI18nsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18nOne := &LabelI18n{}
	labelI18nTwo := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18nOne, labelI18nDBTypes, false, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}
	if err = randomize.Struct(seed, labelI18nTwo, labelI18nDBTypes, false, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18nOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = labelI18nTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := LabelI18ns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLabelI18nsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	labelI18nOne := &LabelI18n{}
	labelI18nTwo := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18nOne, labelI18nDBTypes, false, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}
	if err = randomize.Struct(seed, labelI18nTwo, labelI18nDBTypes, false, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18nOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = labelI18nTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testLabelI18nsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLabelI18nsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx, labelI18nColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLabelI18nToOneLabelUsingLabel(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local LabelI18n
	var foreign Label

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, labelI18nDBTypes, false, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Label struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.LabelID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Label(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LabelI18nSlice{&local}
	if err = local.L.LoadLabel(tx, false, (*[]*LabelI18n)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Label = nil
	if err = local.L.LoadLabel(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLabelI18nToOneSetOpLabelUsingLabel(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a LabelI18n
	var b, c Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, labelI18nDBTypes, false, strmangle.SetComplement(labelI18nPrimaryKeyColumns, labelI18nColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Label{&b, &c} {
		err = a.SetLabel(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Label != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LabelI18ns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID)
		}

		if exists, err := LabelI18nExists(tx, a.LabelID, a.Language); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testLabelI18nsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = labelI18n.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLabelI18nsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := LabelI18nSlice{labelI18n}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testLabelI18nsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := LabelI18ns(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	labelI18nDBTypes = map[string]string{`Author`: `character varying`, `CreatedAt`: `timestamp with time zone`, `LabelID`: `bigint`, `Language`: `character`, `Name`: `text`}
	_                = bytes.MinRead
)

func testLabelI18nsUpdate(t *testing.T) {
	t.Parallel()

	if len(labelI18nColumns) == len(labelI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	if err = labelI18n.Update(tx); err != nil {
		t.Error(err)
	}
}

func testLabelI18nsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(labelI18nColumns) == len(labelI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	labelI18n := &LabelI18n{}
	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, labelI18n, labelI18nDBTypes, true, labelI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(labelI18nColumns, labelI18nPrimaryKeyColumns) {
		fields = labelI18nColumns
	} else {
		fields = strmangle.SetComplement(
			labelI18nColumns,
			labelI18nPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(labelI18n))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := LabelI18nSlice{labelI18n}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testLabelI18nsUpsert(t *testing.T) {
	t.Parallel()

	if len(labelI18nColumns) == len(labelI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	labelI18n := LabelI18n{}
	if err = randomize.Struct(seed, &labelI18n, labelI18nDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = labelI18n.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert LabelI18n: %s", err)
	}

	count, err := LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &labelI18n, labelI18nDBTypes, false, labelI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LabelI18n struct: %s", err)
	}

	if err = labelI18n.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert LabelI18n: %s", err)
	}

	count, err = LabelI18ns(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
