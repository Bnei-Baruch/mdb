// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthorI18ns(t *testing.T) {
	t.Parallel()

	query := AuthorI18ns()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthorI18nsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorI18nsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthorI18ns().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorI18nsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorI18nSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorI18nsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthorI18nExists(tx, o.AuthorID, o.Language)
	if err != nil {
		t.Errorf("Unable to check if AuthorI18n exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthorI18nExists to return true, but got false.")
	}
}

func testAuthorI18nsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authorI18nFound, err := FindAuthorI18n(tx, o.AuthorID, o.Language)
	if err != nil {
		t.Error(err)
	}

	if authorI18nFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthorI18nsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthorI18ns().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthorI18nsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthorI18ns().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthorI18nsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authorI18nOne := &AuthorI18n{}
	authorI18nTwo := &AuthorI18n{}
	if err = randomize.Struct(seed, authorI18nOne, authorI18nDBTypes, false, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}
	if err = randomize.Struct(seed, authorI18nTwo, authorI18nDBTypes, false, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = authorI18nOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorI18nTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthorI18ns().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthorI18nsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorI18nOne := &AuthorI18n{}
	authorI18nTwo := &AuthorI18n{}
	if err = randomize.Struct(seed, authorI18nOne, authorI18nDBTypes, false, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}
	if err = randomize.Struct(seed, authorI18nTwo, authorI18nDBTypes, false, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = authorI18nOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authorI18nTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testAuthorI18nsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorI18nsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(authorI18nColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorI18nToOneAuthorUsingAuthor(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AuthorI18n
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authorI18nDBTypes, false, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthorI18nSlice{&local}
	if err = local.L.LoadAuthor(tx, false, (*[]*AuthorI18n)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAuthorI18nToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AuthorI18n
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authorI18nDBTypes, false, strmangle.SetComplement(authorI18nPrimaryKeyColumns, authorI18nColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorI18ns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		if exists, err := AuthorI18nExists(tx, a.AuthorID, a.Language); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAuthorI18nsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAuthorI18nsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthorI18nSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAuthorI18nsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthorI18ns().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authorI18nDBTypes = map[string]string{`AuthorID`: `bigint`, `Language`: `character`, `Name`: `character varying`, `FullName`: `character varying`, `CreatedAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testAuthorI18nsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authorI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authorI18nAllColumns) == len(authorI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthorI18nsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authorI18nAllColumns) == len(authorI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthorI18n{}
	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authorI18nDBTypes, true, authorI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authorI18nAllColumns, authorI18nPrimaryKeyColumns) {
		fields = authorI18nAllColumns
	} else {
		fields = strmangle.SetComplement(
			authorI18nAllColumns,
			authorI18nPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthorI18nSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthorI18nsUpsert(t *testing.T) {
	t.Parallel()

	if len(authorI18nAllColumns) == len(authorI18nPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthorI18n{}
	if err = randomize.Struct(seed, &o, authorI18nDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthorI18n: %s", err)
	}

	count, err := AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authorI18nDBTypes, false, authorI18nPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthorI18n struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthorI18n: %s", err)
	}

	count, err = AuthorI18ns().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
