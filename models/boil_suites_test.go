// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18ns)
	t.Run("Authors", testAuthors)
	t.Run("BlogPosts", testBlogPosts)
	t.Run("Blogs", testBlogs)
	t.Run("CollectionI18ns", testCollectionI18ns)
	t.Run("Collections", testCollections)
	t.Run("CollectionsContentUnits", testCollectionsContentUnits)
	t.Run("ContentRoleTypes", testContentRoleTypes)
	t.Run("ContentTypes", testContentTypes)
	t.Run("ContentUnitDerivations", testContentUnitDerivations)
	t.Run("ContentUnitI18ns", testContentUnitI18ns)
	t.Run("ContentUnits", testContentUnits)
	t.Run("ContentUnitsPersons", testContentUnitsPersons)
	t.Run("Files", testFiles)
	t.Run("LabelI18ns", testLabelI18ns)
	t.Run("Labels", testLabels)
	t.Run("OperationTypes", testOperationTypes)
	t.Run("Operations", testOperations)
	t.Run("PersonI18ns", testPersonI18ns)
	t.Run("Persons", testPersons)
	t.Run("PublisherI18ns", testPublisherI18ns)
	t.Run("Publishers", testPublishers)
	t.Run("SourceI18ns", testSourceI18ns)
	t.Run("SourceTypes", testSourceTypes)
	t.Run("Sources", testSources)
	t.Run("Storages", testStorages)
	t.Run("TagI18ns", testTagI18ns)
	t.Run("Tags", testTags)
	t.Run("TwitterTweets", testTwitterTweets)
	t.Run("TwitterUsers", testTwitterUsers)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsDelete)
	t.Run("Authors", testAuthorsDelete)
	t.Run("BlogPosts", testBlogPostsDelete)
	t.Run("Blogs", testBlogsDelete)
	t.Run("CollectionI18ns", testCollectionI18nsDelete)
	t.Run("Collections", testCollectionsDelete)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsDelete)
	t.Run("ContentRoleTypes", testContentRoleTypesDelete)
	t.Run("ContentTypes", testContentTypesDelete)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsDelete)
	t.Run("ContentUnitI18ns", testContentUnitI18nsDelete)
	t.Run("ContentUnits", testContentUnitsDelete)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsDelete)
	t.Run("Files", testFilesDelete)
	t.Run("LabelI18ns", testLabelI18nsDelete)
	t.Run("Labels", testLabelsDelete)
	t.Run("OperationTypes", testOperationTypesDelete)
	t.Run("Operations", testOperationsDelete)
	t.Run("PersonI18ns", testPersonI18nsDelete)
	t.Run("Persons", testPersonsDelete)
	t.Run("PublisherI18ns", testPublisherI18nsDelete)
	t.Run("Publishers", testPublishersDelete)
	t.Run("SourceI18ns", testSourceI18nsDelete)
	t.Run("SourceTypes", testSourceTypesDelete)
	t.Run("Sources", testSourcesDelete)
	t.Run("Storages", testStoragesDelete)
	t.Run("TagI18ns", testTagI18nsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("TwitterTweets", testTwitterTweetsDelete)
	t.Run("TwitterUsers", testTwitterUsersDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsQueryDeleteAll)
	t.Run("Authors", testAuthorsQueryDeleteAll)
	t.Run("BlogPosts", testBlogPostsQueryDeleteAll)
	t.Run("Blogs", testBlogsQueryDeleteAll)
	t.Run("CollectionI18ns", testCollectionI18nsQueryDeleteAll)
	t.Run("Collections", testCollectionsQueryDeleteAll)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsQueryDeleteAll)
	t.Run("ContentRoleTypes", testContentRoleTypesQueryDeleteAll)
	t.Run("ContentTypes", testContentTypesQueryDeleteAll)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsQueryDeleteAll)
	t.Run("ContentUnitI18ns", testContentUnitI18nsQueryDeleteAll)
	t.Run("ContentUnits", testContentUnitsQueryDeleteAll)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsQueryDeleteAll)
	t.Run("Files", testFilesQueryDeleteAll)
	t.Run("LabelI18ns", testLabelI18nsQueryDeleteAll)
	t.Run("Labels", testLabelsQueryDeleteAll)
	t.Run("OperationTypes", testOperationTypesQueryDeleteAll)
	t.Run("Operations", testOperationsQueryDeleteAll)
	t.Run("PersonI18ns", testPersonI18nsQueryDeleteAll)
	t.Run("Persons", testPersonsQueryDeleteAll)
	t.Run("PublisherI18ns", testPublisherI18nsQueryDeleteAll)
	t.Run("Publishers", testPublishersQueryDeleteAll)
	t.Run("SourceI18ns", testSourceI18nsQueryDeleteAll)
	t.Run("SourceTypes", testSourceTypesQueryDeleteAll)
	t.Run("Sources", testSourcesQueryDeleteAll)
	t.Run("Storages", testStoragesQueryDeleteAll)
	t.Run("TagI18ns", testTagI18nsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("TwitterTweets", testTwitterTweetsQueryDeleteAll)
	t.Run("TwitterUsers", testTwitterUsersQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsSliceDeleteAll)
	t.Run("Authors", testAuthorsSliceDeleteAll)
	t.Run("BlogPosts", testBlogPostsSliceDeleteAll)
	t.Run("Blogs", testBlogsSliceDeleteAll)
	t.Run("CollectionI18ns", testCollectionI18nsSliceDeleteAll)
	t.Run("Collections", testCollectionsSliceDeleteAll)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsSliceDeleteAll)
	t.Run("ContentRoleTypes", testContentRoleTypesSliceDeleteAll)
	t.Run("ContentTypes", testContentTypesSliceDeleteAll)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsSliceDeleteAll)
	t.Run("ContentUnitI18ns", testContentUnitI18nsSliceDeleteAll)
	t.Run("ContentUnits", testContentUnitsSliceDeleteAll)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsSliceDeleteAll)
	t.Run("Files", testFilesSliceDeleteAll)
	t.Run("LabelI18ns", testLabelI18nsSliceDeleteAll)
	t.Run("Labels", testLabelsSliceDeleteAll)
	t.Run("OperationTypes", testOperationTypesSliceDeleteAll)
	t.Run("Operations", testOperationsSliceDeleteAll)
	t.Run("PersonI18ns", testPersonI18nsSliceDeleteAll)
	t.Run("Persons", testPersonsSliceDeleteAll)
	t.Run("PublisherI18ns", testPublisherI18nsSliceDeleteAll)
	t.Run("Publishers", testPublishersSliceDeleteAll)
	t.Run("SourceI18ns", testSourceI18nsSliceDeleteAll)
	t.Run("SourceTypes", testSourceTypesSliceDeleteAll)
	t.Run("Sources", testSourcesSliceDeleteAll)
	t.Run("Storages", testStoragesSliceDeleteAll)
	t.Run("TagI18ns", testTagI18nsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("TwitterTweets", testTwitterTweetsSliceDeleteAll)
	t.Run("TwitterUsers", testTwitterUsersSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsExists)
	t.Run("Authors", testAuthorsExists)
	t.Run("BlogPosts", testBlogPostsExists)
	t.Run("Blogs", testBlogsExists)
	t.Run("CollectionI18ns", testCollectionI18nsExists)
	t.Run("Collections", testCollectionsExists)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsExists)
	t.Run("ContentRoleTypes", testContentRoleTypesExists)
	t.Run("ContentTypes", testContentTypesExists)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsExists)
	t.Run("ContentUnitI18ns", testContentUnitI18nsExists)
	t.Run("ContentUnits", testContentUnitsExists)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsExists)
	t.Run("Files", testFilesExists)
	t.Run("LabelI18ns", testLabelI18nsExists)
	t.Run("Labels", testLabelsExists)
	t.Run("OperationTypes", testOperationTypesExists)
	t.Run("Operations", testOperationsExists)
	t.Run("PersonI18ns", testPersonI18nsExists)
	t.Run("Persons", testPersonsExists)
	t.Run("PublisherI18ns", testPublisherI18nsExists)
	t.Run("Publishers", testPublishersExists)
	t.Run("SourceI18ns", testSourceI18nsExists)
	t.Run("SourceTypes", testSourceTypesExists)
	t.Run("Sources", testSourcesExists)
	t.Run("Storages", testStoragesExists)
	t.Run("TagI18ns", testTagI18nsExists)
	t.Run("Tags", testTagsExists)
	t.Run("TwitterTweets", testTwitterTweetsExists)
	t.Run("TwitterUsers", testTwitterUsersExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsFind)
	t.Run("Authors", testAuthorsFind)
	t.Run("BlogPosts", testBlogPostsFind)
	t.Run("Blogs", testBlogsFind)
	t.Run("CollectionI18ns", testCollectionI18nsFind)
	t.Run("Collections", testCollectionsFind)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsFind)
	t.Run("ContentRoleTypes", testContentRoleTypesFind)
	t.Run("ContentTypes", testContentTypesFind)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsFind)
	t.Run("ContentUnitI18ns", testContentUnitI18nsFind)
	t.Run("ContentUnits", testContentUnitsFind)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsFind)
	t.Run("Files", testFilesFind)
	t.Run("LabelI18ns", testLabelI18nsFind)
	t.Run("Labels", testLabelsFind)
	t.Run("OperationTypes", testOperationTypesFind)
	t.Run("Operations", testOperationsFind)
	t.Run("PersonI18ns", testPersonI18nsFind)
	t.Run("Persons", testPersonsFind)
	t.Run("PublisherI18ns", testPublisherI18nsFind)
	t.Run("Publishers", testPublishersFind)
	t.Run("SourceI18ns", testSourceI18nsFind)
	t.Run("SourceTypes", testSourceTypesFind)
	t.Run("Sources", testSourcesFind)
	t.Run("Storages", testStoragesFind)
	t.Run("TagI18ns", testTagI18nsFind)
	t.Run("Tags", testTagsFind)
	t.Run("TwitterTweets", testTwitterTweetsFind)
	t.Run("TwitterUsers", testTwitterUsersFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsBind)
	t.Run("Authors", testAuthorsBind)
	t.Run("BlogPosts", testBlogPostsBind)
	t.Run("Blogs", testBlogsBind)
	t.Run("CollectionI18ns", testCollectionI18nsBind)
	t.Run("Collections", testCollectionsBind)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsBind)
	t.Run("ContentRoleTypes", testContentRoleTypesBind)
	t.Run("ContentTypes", testContentTypesBind)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsBind)
	t.Run("ContentUnitI18ns", testContentUnitI18nsBind)
	t.Run("ContentUnits", testContentUnitsBind)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsBind)
	t.Run("Files", testFilesBind)
	t.Run("LabelI18ns", testLabelI18nsBind)
	t.Run("Labels", testLabelsBind)
	t.Run("OperationTypes", testOperationTypesBind)
	t.Run("Operations", testOperationsBind)
	t.Run("PersonI18ns", testPersonI18nsBind)
	t.Run("Persons", testPersonsBind)
	t.Run("PublisherI18ns", testPublisherI18nsBind)
	t.Run("Publishers", testPublishersBind)
	t.Run("SourceI18ns", testSourceI18nsBind)
	t.Run("SourceTypes", testSourceTypesBind)
	t.Run("Sources", testSourcesBind)
	t.Run("Storages", testStoragesBind)
	t.Run("TagI18ns", testTagI18nsBind)
	t.Run("Tags", testTagsBind)
	t.Run("TwitterTweets", testTwitterTweetsBind)
	t.Run("TwitterUsers", testTwitterUsersBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsOne)
	t.Run("Authors", testAuthorsOne)
	t.Run("BlogPosts", testBlogPostsOne)
	t.Run("Blogs", testBlogsOne)
	t.Run("CollectionI18ns", testCollectionI18nsOne)
	t.Run("Collections", testCollectionsOne)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsOne)
	t.Run("ContentRoleTypes", testContentRoleTypesOne)
	t.Run("ContentTypes", testContentTypesOne)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsOne)
	t.Run("ContentUnitI18ns", testContentUnitI18nsOne)
	t.Run("ContentUnits", testContentUnitsOne)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsOne)
	t.Run("Files", testFilesOne)
	t.Run("LabelI18ns", testLabelI18nsOne)
	t.Run("Labels", testLabelsOne)
	t.Run("OperationTypes", testOperationTypesOne)
	t.Run("Operations", testOperationsOne)
	t.Run("PersonI18ns", testPersonI18nsOne)
	t.Run("Persons", testPersonsOne)
	t.Run("PublisherI18ns", testPublisherI18nsOne)
	t.Run("Publishers", testPublishersOne)
	t.Run("SourceI18ns", testSourceI18nsOne)
	t.Run("SourceTypes", testSourceTypesOne)
	t.Run("Sources", testSourcesOne)
	t.Run("Storages", testStoragesOne)
	t.Run("TagI18ns", testTagI18nsOne)
	t.Run("Tags", testTagsOne)
	t.Run("TwitterTweets", testTwitterTweetsOne)
	t.Run("TwitterUsers", testTwitterUsersOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsAll)
	t.Run("Authors", testAuthorsAll)
	t.Run("BlogPosts", testBlogPostsAll)
	t.Run("Blogs", testBlogsAll)
	t.Run("CollectionI18ns", testCollectionI18nsAll)
	t.Run("Collections", testCollectionsAll)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsAll)
	t.Run("ContentRoleTypes", testContentRoleTypesAll)
	t.Run("ContentTypes", testContentTypesAll)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsAll)
	t.Run("ContentUnitI18ns", testContentUnitI18nsAll)
	t.Run("ContentUnits", testContentUnitsAll)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsAll)
	t.Run("Files", testFilesAll)
	t.Run("LabelI18ns", testLabelI18nsAll)
	t.Run("Labels", testLabelsAll)
	t.Run("OperationTypes", testOperationTypesAll)
	t.Run("Operations", testOperationsAll)
	t.Run("PersonI18ns", testPersonI18nsAll)
	t.Run("Persons", testPersonsAll)
	t.Run("PublisherI18ns", testPublisherI18nsAll)
	t.Run("Publishers", testPublishersAll)
	t.Run("SourceI18ns", testSourceI18nsAll)
	t.Run("SourceTypes", testSourceTypesAll)
	t.Run("Sources", testSourcesAll)
	t.Run("Storages", testStoragesAll)
	t.Run("TagI18ns", testTagI18nsAll)
	t.Run("Tags", testTagsAll)
	t.Run("TwitterTweets", testTwitterTweetsAll)
	t.Run("TwitterUsers", testTwitterUsersAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsCount)
	t.Run("Authors", testAuthorsCount)
	t.Run("BlogPosts", testBlogPostsCount)
	t.Run("Blogs", testBlogsCount)
	t.Run("CollectionI18ns", testCollectionI18nsCount)
	t.Run("Collections", testCollectionsCount)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsCount)
	t.Run("ContentRoleTypes", testContentRoleTypesCount)
	t.Run("ContentTypes", testContentTypesCount)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsCount)
	t.Run("ContentUnitI18ns", testContentUnitI18nsCount)
	t.Run("ContentUnits", testContentUnitsCount)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsCount)
	t.Run("Files", testFilesCount)
	t.Run("LabelI18ns", testLabelI18nsCount)
	t.Run("Labels", testLabelsCount)
	t.Run("OperationTypes", testOperationTypesCount)
	t.Run("Operations", testOperationsCount)
	t.Run("PersonI18ns", testPersonI18nsCount)
	t.Run("Persons", testPersonsCount)
	t.Run("PublisherI18ns", testPublisherI18nsCount)
	t.Run("Publishers", testPublishersCount)
	t.Run("SourceI18ns", testSourceI18nsCount)
	t.Run("SourceTypes", testSourceTypesCount)
	t.Run("Sources", testSourcesCount)
	t.Run("Storages", testStoragesCount)
	t.Run("TagI18ns", testTagI18nsCount)
	t.Run("Tags", testTagsCount)
	t.Run("TwitterTweets", testTwitterTweetsCount)
	t.Run("TwitterUsers", testTwitterUsersCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsInsert)
	t.Run("AuthorI18ns", testAuthorI18nsInsertWhitelist)
	t.Run("Authors", testAuthorsInsert)
	t.Run("Authors", testAuthorsInsertWhitelist)
	t.Run("BlogPosts", testBlogPostsInsert)
	t.Run("BlogPosts", testBlogPostsInsertWhitelist)
	t.Run("Blogs", testBlogsInsert)
	t.Run("Blogs", testBlogsInsertWhitelist)
	t.Run("CollectionI18ns", testCollectionI18nsInsert)
	t.Run("CollectionI18ns", testCollectionI18nsInsertWhitelist)
	t.Run("Collections", testCollectionsInsert)
	t.Run("Collections", testCollectionsInsertWhitelist)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsInsert)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsInsertWhitelist)
	t.Run("ContentRoleTypes", testContentRoleTypesInsert)
	t.Run("ContentRoleTypes", testContentRoleTypesInsertWhitelist)
	t.Run("ContentTypes", testContentTypesInsert)
	t.Run("ContentTypes", testContentTypesInsertWhitelist)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsInsert)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsInsertWhitelist)
	t.Run("ContentUnitI18ns", testContentUnitI18nsInsert)
	t.Run("ContentUnitI18ns", testContentUnitI18nsInsertWhitelist)
	t.Run("ContentUnits", testContentUnitsInsert)
	t.Run("ContentUnits", testContentUnitsInsertWhitelist)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsInsert)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsInsertWhitelist)
	t.Run("Files", testFilesInsert)
	t.Run("Files", testFilesInsertWhitelist)
	t.Run("LabelI18ns", testLabelI18nsInsert)
	t.Run("LabelI18ns", testLabelI18nsInsertWhitelist)
	t.Run("Labels", testLabelsInsert)
	t.Run("Labels", testLabelsInsertWhitelist)
	t.Run("OperationTypes", testOperationTypesInsert)
	t.Run("OperationTypes", testOperationTypesInsertWhitelist)
	t.Run("Operations", testOperationsInsert)
	t.Run("Operations", testOperationsInsertWhitelist)
	t.Run("PersonI18ns", testPersonI18nsInsert)
	t.Run("PersonI18ns", testPersonI18nsInsertWhitelist)
	t.Run("Persons", testPersonsInsert)
	t.Run("Persons", testPersonsInsertWhitelist)
	t.Run("PublisherI18ns", testPublisherI18nsInsert)
	t.Run("PublisherI18ns", testPublisherI18nsInsertWhitelist)
	t.Run("Publishers", testPublishersInsert)
	t.Run("Publishers", testPublishersInsertWhitelist)
	t.Run("SourceI18ns", testSourceI18nsInsert)
	t.Run("SourceI18ns", testSourceI18nsInsertWhitelist)
	t.Run("SourceTypes", testSourceTypesInsert)
	t.Run("SourceTypes", testSourceTypesInsertWhitelist)
	t.Run("Sources", testSourcesInsert)
	t.Run("Sources", testSourcesInsertWhitelist)
	t.Run("Storages", testStoragesInsert)
	t.Run("Storages", testStoragesInsertWhitelist)
	t.Run("TagI18ns", testTagI18nsInsert)
	t.Run("TagI18ns", testTagI18nsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("TwitterTweets", testTwitterTweetsInsert)
	t.Run("TwitterTweets", testTwitterTweetsInsertWhitelist)
	t.Run("TwitterUsers", testTwitterUsersInsert)
	t.Run("TwitterUsers", testTwitterUsersInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthorI18nToAuthorUsingAuthor", testAuthorI18nToOneAuthorUsingAuthor)
	t.Run("BlogPostToBlogUsingBlog", testBlogPostToOneBlogUsingBlog)
	t.Run("CollectionI18nToCollectionUsingCollection", testCollectionI18nToOneCollectionUsingCollection)
	t.Run("CollectionI18nToUserUsingUser", testCollectionI18nToOneUserUsingUser)
	t.Run("CollectionToContentTypeUsingType", testCollectionToOneContentTypeUsingType)
	t.Run("CollectionsContentUnitToCollectionUsingCollection", testCollectionsContentUnitToOneCollectionUsingCollection)
	t.Run("CollectionsContentUnitToContentUnitUsingContentUnit", testCollectionsContentUnitToOneContentUnitUsingContentUnit)
	t.Run("ContentUnitDerivationToContentUnitUsingDerived", testContentUnitDerivationToOneContentUnitUsingDerived)
	t.Run("ContentUnitDerivationToContentUnitUsingSource", testContentUnitDerivationToOneContentUnitUsingSource)
	t.Run("ContentUnitI18nToContentUnitUsingContentUnit", testContentUnitI18nToOneContentUnitUsingContentUnit)
	t.Run("ContentUnitI18nToUserUsingUser", testContentUnitI18nToOneUserUsingUser)
	t.Run("ContentUnitToContentTypeUsingType", testContentUnitToOneContentTypeUsingType)
	t.Run("ContentUnitsPersonToContentUnitUsingContentUnit", testContentUnitsPersonToOneContentUnitUsingContentUnit)
	t.Run("ContentUnitsPersonToPersonUsingPerson", testContentUnitsPersonToOnePersonUsingPerson)
	t.Run("ContentUnitsPersonToContentRoleTypeUsingRole", testContentUnitsPersonToOneContentRoleTypeUsingRole)
	t.Run("FileToContentUnitUsingContentUnit", testFileToOneContentUnitUsingContentUnit)
	t.Run("FileToFileUsingParent", testFileToOneFileUsingParent)
	t.Run("LabelI18nToLabelUsingLabel", testLabelI18nToOneLabelUsingLabel)
	t.Run("LabelI18nToUserUsingUser", testLabelI18nToOneUserUsingUser)
	t.Run("LabelToContentUnitUsingContentUnit", testLabelToOneContentUnitUsingContentUnit)
	t.Run("OperationToOperationTypeUsingType", testOperationToOneOperationTypeUsingType)
	t.Run("OperationToUserUsingUser", testOperationToOneUserUsingUser)
	t.Run("PersonI18nToPersonUsingPerson", testPersonI18nToOnePersonUsingPerson)
	t.Run("PersonI18nToUserUsingUser", testPersonI18nToOneUserUsingUser)
	t.Run("PublisherI18nToPublisherUsingPublisher", testPublisherI18nToOnePublisherUsingPublisher)
	t.Run("PublisherI18nToUserUsingUser", testPublisherI18nToOneUserUsingUser)
	t.Run("SourceI18nToSourceUsingSource", testSourceI18nToOneSourceUsingSource)
	t.Run("SourceToSourceUsingParent", testSourceToOneSourceUsingParent)
	t.Run("SourceToSourceTypeUsingType", testSourceToOneSourceTypeUsingType)
	t.Run("TagI18nToTagUsingTag", testTagI18nToOneTagUsingTag)
	t.Run("TagI18nToUserUsingUser", testTagI18nToOneUserUsingUser)
	t.Run("TagToTagUsingParent", testTagToOneTagUsingParent)
	t.Run("TwitterTweetToTwitterUserUsingUser", testTwitterTweetToOneTwitterUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthorToAuthorI18ns", testAuthorToManyAuthorI18ns)
	t.Run("AuthorToSources", testAuthorToManySources)
	t.Run("BlogToBlogPosts", testBlogToManyBlogPosts)
	t.Run("CollectionToCollectionI18ns", testCollectionToManyCollectionI18ns)
	t.Run("CollectionToCollectionsContentUnits", testCollectionToManyCollectionsContentUnits)
	t.Run("ContentRoleTypeToRoleContentUnitsPersons", testContentRoleTypeToManyRoleContentUnitsPersons)
	t.Run("ContentTypeToTypeCollections", testContentTypeToManyTypeCollections)
	t.Run("ContentTypeToTypeContentUnits", testContentTypeToManyTypeContentUnits)
	t.Run("ContentUnitToCollectionsContentUnits", testContentUnitToManyCollectionsContentUnits)
	t.Run("ContentUnitToDerivedContentUnitDerivations", testContentUnitToManyDerivedContentUnitDerivations)
	t.Run("ContentUnitToSourceContentUnitDerivations", testContentUnitToManySourceContentUnitDerivations)
	t.Run("ContentUnitToContentUnitI18ns", testContentUnitToManyContentUnitI18ns)
	t.Run("ContentUnitToContentUnitsPersons", testContentUnitToManyContentUnitsPersons)
	t.Run("ContentUnitToPublishers", testContentUnitToManyPublishers)
	t.Run("ContentUnitToSources", testContentUnitToManySources)
	t.Run("ContentUnitToTags", testContentUnitToManyTags)
	t.Run("ContentUnitToFiles", testContentUnitToManyFiles)
	t.Run("ContentUnitToLabels", testContentUnitToManyLabels)
	t.Run("FileToParentFiles", testFileToManyParentFiles)
	t.Run("FileToOperations", testFileToManyOperations)
	t.Run("FileToStorages", testFileToManyStorages)
	t.Run("LabelToLabelI18ns", testLabelToManyLabelI18ns)
	t.Run("LabelToTags", testLabelToManyTags)
	t.Run("OperationTypeToTypeOperations", testOperationTypeToManyTypeOperations)
	t.Run("OperationToFiles", testOperationToManyFiles)
	t.Run("PersonToContentUnitsPersons", testPersonToManyContentUnitsPersons)
	t.Run("PersonToPersonI18ns", testPersonToManyPersonI18ns)
	t.Run("PublisherToContentUnits", testPublisherToManyContentUnits)
	t.Run("PublisherToPublisherI18ns", testPublisherToManyPublisherI18ns)
	t.Run("SourceTypeToTypeSources", testSourceTypeToManyTypeSources)
	t.Run("SourceToAuthors", testSourceToManyAuthors)
	t.Run("SourceToContentUnits", testSourceToManyContentUnits)
	t.Run("SourceToSourceI18ns", testSourceToManySourceI18ns)
	t.Run("SourceToParentSources", testSourceToManyParentSources)
	t.Run("StorageToFiles", testStorageToManyFiles)
	t.Run("TagToContentUnits", testTagToManyContentUnits)
	t.Run("TagToLabels", testTagToManyLabels)
	t.Run("TagToTagI18ns", testTagToManyTagI18ns)
	t.Run("TagToParentTags", testTagToManyParentTags)
	t.Run("TwitterUserToUserTwitterTweets", testTwitterUserToManyUserTwitterTweets)
	t.Run("UserToCollectionI18ns", testUserToManyCollectionI18ns)
	t.Run("UserToContentUnitI18ns", testUserToManyContentUnitI18ns)
	t.Run("UserToLabelI18ns", testUserToManyLabelI18ns)
	t.Run("UserToOperations", testUserToManyOperations)
	t.Run("UserToPersonI18ns", testUserToManyPersonI18ns)
	t.Run("UserToPublisherI18ns", testUserToManyPublisherI18ns)
	t.Run("UserToTagI18ns", testUserToManyTagI18ns)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthorI18nToAuthorUsingAuthorI18ns", testAuthorI18nToOneSetOpAuthorUsingAuthor)
	t.Run("BlogPostToBlogUsingBlogPosts", testBlogPostToOneSetOpBlogUsingBlog)
	t.Run("CollectionI18nToCollectionUsingCollectionI18ns", testCollectionI18nToOneSetOpCollectionUsingCollection)
	t.Run("CollectionI18nToUserUsingCollectionI18ns", testCollectionI18nToOneSetOpUserUsingUser)
	t.Run("CollectionToContentTypeUsingTypeCollections", testCollectionToOneSetOpContentTypeUsingType)
	t.Run("CollectionsContentUnitToCollectionUsingCollectionsContentUnits", testCollectionsContentUnitToOneSetOpCollectionUsingCollection)
	t.Run("CollectionsContentUnitToContentUnitUsingCollectionsContentUnits", testCollectionsContentUnitToOneSetOpContentUnitUsingContentUnit)
	t.Run("ContentUnitDerivationToContentUnitUsingDerivedContentUnitDerivations", testContentUnitDerivationToOneSetOpContentUnitUsingDerived)
	t.Run("ContentUnitDerivationToContentUnitUsingSourceContentUnitDerivations", testContentUnitDerivationToOneSetOpContentUnitUsingSource)
	t.Run("ContentUnitI18nToContentUnitUsingContentUnitI18ns", testContentUnitI18nToOneSetOpContentUnitUsingContentUnit)
	t.Run("ContentUnitI18nToUserUsingContentUnitI18ns", testContentUnitI18nToOneSetOpUserUsingUser)
	t.Run("ContentUnitToContentTypeUsingTypeContentUnits", testContentUnitToOneSetOpContentTypeUsingType)
	t.Run("ContentUnitsPersonToContentUnitUsingContentUnitsPersons", testContentUnitsPersonToOneSetOpContentUnitUsingContentUnit)
	t.Run("ContentUnitsPersonToPersonUsingContentUnitsPersons", testContentUnitsPersonToOneSetOpPersonUsingPerson)
	t.Run("ContentUnitsPersonToContentRoleTypeUsingRoleContentUnitsPersons", testContentUnitsPersonToOneSetOpContentRoleTypeUsingRole)
	t.Run("FileToContentUnitUsingFiles", testFileToOneSetOpContentUnitUsingContentUnit)
	t.Run("FileToFileUsingParentFiles", testFileToOneSetOpFileUsingParent)
	t.Run("LabelI18nToLabelUsingLabelI18ns", testLabelI18nToOneSetOpLabelUsingLabel)
	t.Run("LabelI18nToUserUsingLabelI18ns", testLabelI18nToOneSetOpUserUsingUser)
	t.Run("LabelToContentUnitUsingLabels", testLabelToOneSetOpContentUnitUsingContentUnit)
	t.Run("OperationToOperationTypeUsingTypeOperations", testOperationToOneSetOpOperationTypeUsingType)
	t.Run("OperationToUserUsingOperations", testOperationToOneSetOpUserUsingUser)
	t.Run("PersonI18nToPersonUsingPersonI18ns", testPersonI18nToOneSetOpPersonUsingPerson)
	t.Run("PersonI18nToUserUsingPersonI18ns", testPersonI18nToOneSetOpUserUsingUser)
	t.Run("PublisherI18nToPublisherUsingPublisherI18ns", testPublisherI18nToOneSetOpPublisherUsingPublisher)
	t.Run("PublisherI18nToUserUsingPublisherI18ns", testPublisherI18nToOneSetOpUserUsingUser)
	t.Run("SourceI18nToSourceUsingSourceI18ns", testSourceI18nToOneSetOpSourceUsingSource)
	t.Run("SourceToSourceUsingParentSources", testSourceToOneSetOpSourceUsingParent)
	t.Run("SourceToSourceTypeUsingTypeSources", testSourceToOneSetOpSourceTypeUsingType)
	t.Run("TagI18nToTagUsingTagI18ns", testTagI18nToOneSetOpTagUsingTag)
	t.Run("TagI18nToUserUsingTagI18ns", testTagI18nToOneSetOpUserUsingUser)
	t.Run("TagToTagUsingParentTags", testTagToOneSetOpTagUsingParent)
	t.Run("TwitterTweetToTwitterUserUsingUserTwitterTweets", testTwitterTweetToOneSetOpTwitterUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CollectionI18nToUserUsingCollectionI18ns", testCollectionI18nToOneRemoveOpUserUsingUser)
	t.Run("ContentUnitI18nToUserUsingContentUnitI18ns", testContentUnitI18nToOneRemoveOpUserUsingUser)
	t.Run("FileToContentUnitUsingFiles", testFileToOneRemoveOpContentUnitUsingContentUnit)
	t.Run("FileToFileUsingParentFiles", testFileToOneRemoveOpFileUsingParent)
	t.Run("LabelI18nToUserUsingLabelI18ns", testLabelI18nToOneRemoveOpUserUsingUser)
	t.Run("OperationToUserUsingOperations", testOperationToOneRemoveOpUserUsingUser)
	t.Run("PersonI18nToUserUsingPersonI18ns", testPersonI18nToOneRemoveOpUserUsingUser)
	t.Run("PublisherI18nToUserUsingPublisherI18ns", testPublisherI18nToOneRemoveOpUserUsingUser)
	t.Run("SourceToSourceUsingParentSources", testSourceToOneRemoveOpSourceUsingParent)
	t.Run("TagI18nToUserUsingTagI18ns", testTagI18nToOneRemoveOpUserUsingUser)
	t.Run("TagToTagUsingParentTags", testTagToOneRemoveOpTagUsingParent)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthorToAuthorI18ns", testAuthorToManyAddOpAuthorI18ns)
	t.Run("AuthorToSources", testAuthorToManyAddOpSources)
	t.Run("BlogToBlogPosts", testBlogToManyAddOpBlogPosts)
	t.Run("CollectionToCollectionI18ns", testCollectionToManyAddOpCollectionI18ns)
	t.Run("CollectionToCollectionsContentUnits", testCollectionToManyAddOpCollectionsContentUnits)
	t.Run("ContentRoleTypeToRoleContentUnitsPersons", testContentRoleTypeToManyAddOpRoleContentUnitsPersons)
	t.Run("ContentTypeToTypeCollections", testContentTypeToManyAddOpTypeCollections)
	t.Run("ContentTypeToTypeContentUnits", testContentTypeToManyAddOpTypeContentUnits)
	t.Run("ContentUnitToCollectionsContentUnits", testContentUnitToManyAddOpCollectionsContentUnits)
	t.Run("ContentUnitToDerivedContentUnitDerivations", testContentUnitToManyAddOpDerivedContentUnitDerivations)
	t.Run("ContentUnitToSourceContentUnitDerivations", testContentUnitToManyAddOpSourceContentUnitDerivations)
	t.Run("ContentUnitToContentUnitI18ns", testContentUnitToManyAddOpContentUnitI18ns)
	t.Run("ContentUnitToContentUnitsPersons", testContentUnitToManyAddOpContentUnitsPersons)
	t.Run("ContentUnitToPublishers", testContentUnitToManyAddOpPublishers)
	t.Run("ContentUnitToSources", testContentUnitToManyAddOpSources)
	t.Run("ContentUnitToTags", testContentUnitToManyAddOpTags)
	t.Run("ContentUnitToFiles", testContentUnitToManyAddOpFiles)
	t.Run("ContentUnitToLabels", testContentUnitToManyAddOpLabels)
	t.Run("FileToParentFiles", testFileToManyAddOpParentFiles)
	t.Run("FileToOperations", testFileToManyAddOpOperations)
	t.Run("FileToStorages", testFileToManyAddOpStorages)
	t.Run("LabelToLabelI18ns", testLabelToManyAddOpLabelI18ns)
	t.Run("LabelToTags", testLabelToManyAddOpTags)
	t.Run("OperationTypeToTypeOperations", testOperationTypeToManyAddOpTypeOperations)
	t.Run("OperationToFiles", testOperationToManyAddOpFiles)
	t.Run("PersonToContentUnitsPersons", testPersonToManyAddOpContentUnitsPersons)
	t.Run("PersonToPersonI18ns", testPersonToManyAddOpPersonI18ns)
	t.Run("PublisherToContentUnits", testPublisherToManyAddOpContentUnits)
	t.Run("PublisherToPublisherI18ns", testPublisherToManyAddOpPublisherI18ns)
	t.Run("SourceTypeToTypeSources", testSourceTypeToManyAddOpTypeSources)
	t.Run("SourceToAuthors", testSourceToManyAddOpAuthors)
	t.Run("SourceToContentUnits", testSourceToManyAddOpContentUnits)
	t.Run("SourceToSourceI18ns", testSourceToManyAddOpSourceI18ns)
	t.Run("SourceToParentSources", testSourceToManyAddOpParentSources)
	t.Run("StorageToFiles", testStorageToManyAddOpFiles)
	t.Run("TagToContentUnits", testTagToManyAddOpContentUnits)
	t.Run("TagToLabels", testTagToManyAddOpLabels)
	t.Run("TagToTagI18ns", testTagToManyAddOpTagI18ns)
	t.Run("TagToParentTags", testTagToManyAddOpParentTags)
	t.Run("TwitterUserToUserTwitterTweets", testTwitterUserToManyAddOpUserTwitterTweets)
	t.Run("UserToCollectionI18ns", testUserToManyAddOpCollectionI18ns)
	t.Run("UserToContentUnitI18ns", testUserToManyAddOpContentUnitI18ns)
	t.Run("UserToLabelI18ns", testUserToManyAddOpLabelI18ns)
	t.Run("UserToOperations", testUserToManyAddOpOperations)
	t.Run("UserToPersonI18ns", testUserToManyAddOpPersonI18ns)
	t.Run("UserToPublisherI18ns", testUserToManyAddOpPublisherI18ns)
	t.Run("UserToTagI18ns", testUserToManyAddOpTagI18ns)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AuthorToSources", testAuthorToManySetOpSources)
	t.Run("ContentUnitToPublishers", testContentUnitToManySetOpPublishers)
	t.Run("ContentUnitToSources", testContentUnitToManySetOpSources)
	t.Run("ContentUnitToTags", testContentUnitToManySetOpTags)
	t.Run("ContentUnitToFiles", testContentUnitToManySetOpFiles)
	t.Run("FileToParentFiles", testFileToManySetOpParentFiles)
	t.Run("FileToOperations", testFileToManySetOpOperations)
	t.Run("FileToStorages", testFileToManySetOpStorages)
	t.Run("LabelToTags", testLabelToManySetOpTags)
	t.Run("OperationToFiles", testOperationToManySetOpFiles)
	t.Run("PublisherToContentUnits", testPublisherToManySetOpContentUnits)
	t.Run("SourceToAuthors", testSourceToManySetOpAuthors)
	t.Run("SourceToContentUnits", testSourceToManySetOpContentUnits)
	t.Run("SourceToParentSources", testSourceToManySetOpParentSources)
	t.Run("StorageToFiles", testStorageToManySetOpFiles)
	t.Run("TagToContentUnits", testTagToManySetOpContentUnits)
	t.Run("TagToLabels", testTagToManySetOpLabels)
	t.Run("TagToParentTags", testTagToManySetOpParentTags)
	t.Run("UserToCollectionI18ns", testUserToManySetOpCollectionI18ns)
	t.Run("UserToContentUnitI18ns", testUserToManySetOpContentUnitI18ns)
	t.Run("UserToLabelI18ns", testUserToManySetOpLabelI18ns)
	t.Run("UserToOperations", testUserToManySetOpOperations)
	t.Run("UserToPersonI18ns", testUserToManySetOpPersonI18ns)
	t.Run("UserToPublisherI18ns", testUserToManySetOpPublisherI18ns)
	t.Run("UserToTagI18ns", testUserToManySetOpTagI18ns)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AuthorToSources", testAuthorToManyRemoveOpSources)
	t.Run("ContentUnitToPublishers", testContentUnitToManyRemoveOpPublishers)
	t.Run("ContentUnitToSources", testContentUnitToManyRemoveOpSources)
	t.Run("ContentUnitToTags", testContentUnitToManyRemoveOpTags)
	t.Run("ContentUnitToFiles", testContentUnitToManyRemoveOpFiles)
	t.Run("FileToParentFiles", testFileToManyRemoveOpParentFiles)
	t.Run("FileToOperations", testFileToManyRemoveOpOperations)
	t.Run("FileToStorages", testFileToManyRemoveOpStorages)
	t.Run("LabelToTags", testLabelToManyRemoveOpTags)
	t.Run("OperationToFiles", testOperationToManyRemoveOpFiles)
	t.Run("PublisherToContentUnits", testPublisherToManyRemoveOpContentUnits)
	t.Run("SourceToAuthors", testSourceToManyRemoveOpAuthors)
	t.Run("SourceToContentUnits", testSourceToManyRemoveOpContentUnits)
	t.Run("SourceToParentSources", testSourceToManyRemoveOpParentSources)
	t.Run("StorageToFiles", testStorageToManyRemoveOpFiles)
	t.Run("TagToContentUnits", testTagToManyRemoveOpContentUnits)
	t.Run("TagToLabels", testTagToManyRemoveOpLabels)
	t.Run("TagToParentTags", testTagToManyRemoveOpParentTags)
	t.Run("UserToCollectionI18ns", testUserToManyRemoveOpCollectionI18ns)
	t.Run("UserToContentUnitI18ns", testUserToManyRemoveOpContentUnitI18ns)
	t.Run("UserToLabelI18ns", testUserToManyRemoveOpLabelI18ns)
	t.Run("UserToOperations", testUserToManyRemoveOpOperations)
	t.Run("UserToPersonI18ns", testUserToManyRemoveOpPersonI18ns)
	t.Run("UserToPublisherI18ns", testUserToManyRemoveOpPublisherI18ns)
	t.Run("UserToTagI18ns", testUserToManyRemoveOpTagI18ns)
}

func TestReload(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsReload)
	t.Run("Authors", testAuthorsReload)
	t.Run("BlogPosts", testBlogPostsReload)
	t.Run("Blogs", testBlogsReload)
	t.Run("CollectionI18ns", testCollectionI18nsReload)
	t.Run("Collections", testCollectionsReload)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsReload)
	t.Run("ContentRoleTypes", testContentRoleTypesReload)
	t.Run("ContentTypes", testContentTypesReload)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsReload)
	t.Run("ContentUnitI18ns", testContentUnitI18nsReload)
	t.Run("ContentUnits", testContentUnitsReload)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsReload)
	t.Run("Files", testFilesReload)
	t.Run("LabelI18ns", testLabelI18nsReload)
	t.Run("Labels", testLabelsReload)
	t.Run("OperationTypes", testOperationTypesReload)
	t.Run("Operations", testOperationsReload)
	t.Run("PersonI18ns", testPersonI18nsReload)
	t.Run("Persons", testPersonsReload)
	t.Run("PublisherI18ns", testPublisherI18nsReload)
	t.Run("Publishers", testPublishersReload)
	t.Run("SourceI18ns", testSourceI18nsReload)
	t.Run("SourceTypes", testSourceTypesReload)
	t.Run("Sources", testSourcesReload)
	t.Run("Storages", testStoragesReload)
	t.Run("TagI18ns", testTagI18nsReload)
	t.Run("Tags", testTagsReload)
	t.Run("TwitterTweets", testTwitterTweetsReload)
	t.Run("TwitterUsers", testTwitterUsersReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsReloadAll)
	t.Run("Authors", testAuthorsReloadAll)
	t.Run("BlogPosts", testBlogPostsReloadAll)
	t.Run("Blogs", testBlogsReloadAll)
	t.Run("CollectionI18ns", testCollectionI18nsReloadAll)
	t.Run("Collections", testCollectionsReloadAll)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsReloadAll)
	t.Run("ContentRoleTypes", testContentRoleTypesReloadAll)
	t.Run("ContentTypes", testContentTypesReloadAll)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsReloadAll)
	t.Run("ContentUnitI18ns", testContentUnitI18nsReloadAll)
	t.Run("ContentUnits", testContentUnitsReloadAll)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsReloadAll)
	t.Run("Files", testFilesReloadAll)
	t.Run("LabelI18ns", testLabelI18nsReloadAll)
	t.Run("Labels", testLabelsReloadAll)
	t.Run("OperationTypes", testOperationTypesReloadAll)
	t.Run("Operations", testOperationsReloadAll)
	t.Run("PersonI18ns", testPersonI18nsReloadAll)
	t.Run("Persons", testPersonsReloadAll)
	t.Run("PublisherI18ns", testPublisherI18nsReloadAll)
	t.Run("Publishers", testPublishersReloadAll)
	t.Run("SourceI18ns", testSourceI18nsReloadAll)
	t.Run("SourceTypes", testSourceTypesReloadAll)
	t.Run("Sources", testSourcesReloadAll)
	t.Run("Storages", testStoragesReloadAll)
	t.Run("TagI18ns", testTagI18nsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("TwitterTweets", testTwitterTweetsReloadAll)
	t.Run("TwitterUsers", testTwitterUsersReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsSelect)
	t.Run("Authors", testAuthorsSelect)
	t.Run("BlogPosts", testBlogPostsSelect)
	t.Run("Blogs", testBlogsSelect)
	t.Run("CollectionI18ns", testCollectionI18nsSelect)
	t.Run("Collections", testCollectionsSelect)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsSelect)
	t.Run("ContentRoleTypes", testContentRoleTypesSelect)
	t.Run("ContentTypes", testContentTypesSelect)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsSelect)
	t.Run("ContentUnitI18ns", testContentUnitI18nsSelect)
	t.Run("ContentUnits", testContentUnitsSelect)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsSelect)
	t.Run("Files", testFilesSelect)
	t.Run("LabelI18ns", testLabelI18nsSelect)
	t.Run("Labels", testLabelsSelect)
	t.Run("OperationTypes", testOperationTypesSelect)
	t.Run("Operations", testOperationsSelect)
	t.Run("PersonI18ns", testPersonI18nsSelect)
	t.Run("Persons", testPersonsSelect)
	t.Run("PublisherI18ns", testPublisherI18nsSelect)
	t.Run("Publishers", testPublishersSelect)
	t.Run("SourceI18ns", testSourceI18nsSelect)
	t.Run("SourceTypes", testSourceTypesSelect)
	t.Run("Sources", testSourcesSelect)
	t.Run("Storages", testStoragesSelect)
	t.Run("TagI18ns", testTagI18nsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("TwitterTweets", testTwitterTweetsSelect)
	t.Run("TwitterUsers", testTwitterUsersSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsUpdate)
	t.Run("Authors", testAuthorsUpdate)
	t.Run("BlogPosts", testBlogPostsUpdate)
	t.Run("Blogs", testBlogsUpdate)
	t.Run("CollectionI18ns", testCollectionI18nsUpdate)
	t.Run("Collections", testCollectionsUpdate)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsUpdate)
	t.Run("ContentRoleTypes", testContentRoleTypesUpdate)
	t.Run("ContentTypes", testContentTypesUpdate)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsUpdate)
	t.Run("ContentUnitI18ns", testContentUnitI18nsUpdate)
	t.Run("ContentUnits", testContentUnitsUpdate)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsUpdate)
	t.Run("Files", testFilesUpdate)
	t.Run("LabelI18ns", testLabelI18nsUpdate)
	t.Run("Labels", testLabelsUpdate)
	t.Run("OperationTypes", testOperationTypesUpdate)
	t.Run("Operations", testOperationsUpdate)
	t.Run("PersonI18ns", testPersonI18nsUpdate)
	t.Run("Persons", testPersonsUpdate)
	t.Run("PublisherI18ns", testPublisherI18nsUpdate)
	t.Run("Publishers", testPublishersUpdate)
	t.Run("SourceI18ns", testSourceI18nsUpdate)
	t.Run("SourceTypes", testSourceTypesUpdate)
	t.Run("Sources", testSourcesUpdate)
	t.Run("Storages", testStoragesUpdate)
	t.Run("TagI18ns", testTagI18nsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("TwitterTweets", testTwitterTweetsUpdate)
	t.Run("TwitterUsers", testTwitterUsersUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuthorI18ns", testAuthorI18nsSliceUpdateAll)
	t.Run("Authors", testAuthorsSliceUpdateAll)
	t.Run("BlogPosts", testBlogPostsSliceUpdateAll)
	t.Run("Blogs", testBlogsSliceUpdateAll)
	t.Run("CollectionI18ns", testCollectionI18nsSliceUpdateAll)
	t.Run("Collections", testCollectionsSliceUpdateAll)
	t.Run("CollectionsContentUnits", testCollectionsContentUnitsSliceUpdateAll)
	t.Run("ContentRoleTypes", testContentRoleTypesSliceUpdateAll)
	t.Run("ContentTypes", testContentTypesSliceUpdateAll)
	t.Run("ContentUnitDerivations", testContentUnitDerivationsSliceUpdateAll)
	t.Run("ContentUnitI18ns", testContentUnitI18nsSliceUpdateAll)
	t.Run("ContentUnits", testContentUnitsSliceUpdateAll)
	t.Run("ContentUnitsPersons", testContentUnitsPersonsSliceUpdateAll)
	t.Run("Files", testFilesSliceUpdateAll)
	t.Run("LabelI18ns", testLabelI18nsSliceUpdateAll)
	t.Run("Labels", testLabelsSliceUpdateAll)
	t.Run("OperationTypes", testOperationTypesSliceUpdateAll)
	t.Run("Operations", testOperationsSliceUpdateAll)
	t.Run("PersonI18ns", testPersonI18nsSliceUpdateAll)
	t.Run("Persons", testPersonsSliceUpdateAll)
	t.Run("PublisherI18ns", testPublisherI18nsSliceUpdateAll)
	t.Run("Publishers", testPublishersSliceUpdateAll)
	t.Run("SourceI18ns", testSourceI18nsSliceUpdateAll)
	t.Run("SourceTypes", testSourceTypesSliceUpdateAll)
	t.Run("Sources", testSourcesSliceUpdateAll)
	t.Run("Storages", testStoragesSliceUpdateAll)
	t.Run("TagI18ns", testTagI18nsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("TwitterTweets", testTwitterTweetsSliceUpdateAll)
	t.Run("TwitterUsers", testTwitterUsersSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
